{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aleksandar\\\\Desktop\\\\Udemy\\\\React\\\\crwn-clothing\\\\src\\\\contexts\\\\cart.context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useEffect, useState, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst addCartItem = (cartItems, productToAdd) => {\n  //find if cartitems contains productToAdd\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === productToAdd.id);\n\n  //If found, increment quantity\n  if (existingCartItem) {\n    return cartItems.map(cartItem => cartItem.id === productToAdd.id ? {\n      ...cartItem,\n      quantity: cartItem.quantity + 1\n    } : cartItem);\n  }\n\n  //return new arra with modified cartItems/ new cart item\n  return [...cartItems, {\n    ...productToAdd,\n    quantity: 1\n  }];\n};\nconst removeCartItem = (cartItems, cartItemToRemove) => {\n  //find the cart item to remove\n  const existingCartItem = cartItems.find(cartItem => cartItem.id === cartItemToRemove.id);\n\n  //check if quantity is equal to 1, if it is remove the item from cart\n  if (existingCartItem.quantity === 1) {\n    return cartItems.filter(cartItem => cartItem.id !== cartItemToRemove.id);\n  }\n\n  //return back cart items with matching cart item with reduced quantity\n  return cartItems.map(cartItem => cartItem.id === cartItemToRemove.id ? {\n    ...cartItem,\n    quantity: cartItem.quantity - 1\n  } : cartItem);\n};\nconst clearCartItem = (cartItems, cartItemToClear) => {\n  return cartItems.filter(cartItem => cartItem.id !== cartItemToClear.id);\n};\nexport const CartContext = /*#__PURE__*/createContext({\n  isCartOpen: false,\n  setIsCartOpen: () => {},\n  cartItems: [],\n  addItemToCart: () => {},\n  removeItemFromCart: () => {},\n  clearItemFromCart: () => {},\n  cartCount: 0,\n  cartTotal: 0\n});\nconst INITIAL_STATE = {\n  isCartOpen: false,\n  cartItems: [],\n  cartCount: 0,\n  cartTotal: 0\n};\nconst cartReducer = (state, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case \"ADD_TO_CART\":\n      return {\n        ...state,\n        cartItems: addItemToCart(state.cartItems, payload),\n        cartTotal: cartCount\n      };\n    default:\n      throw new Error(`unhandled type of ${type} of cartReducer`);\n  }\n};\nconst AddToCartAction = itemToAdd => {\n  dispatch({\n    type: \"ADD_TO_CART\",\n    payload: itemToAdd\n  });\n};\n_c = AddToCartAction;\nexport const CartProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [isCartOpen, setIsCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([]);\n  const [cartCount, setCartCount] = useState(0);\n  const [cartTotal, setCartTotal] = useState(0);\n  useEffect(() => {\n    const newCartCount = cartItems.reduce((total, cartItem) => total + cartItem.quantity, 0);\n    setCartCount(newCartCount);\n  }, [cartItems]);\n  useEffect(() => {\n    const newCartTotal = cartItems.reduce((total, cartItem) => total + cartItem.quantity * cartItem.price, 0);\n    setCartTotal(newCartTotal);\n  }, [cartItems]);\n  const addItemToCart = productToAdd => {\n    setCartItems(addCartItem(cartItems, productToAdd));\n  };\n  const removeItemToCart = cartItemToRemove => {\n    setCartItems(removeCartItem(cartItems, cartItemToRemove));\n  };\n  const clearItemFromCart = cartItemToClear => {\n    setCartItems(clearCartItem(cartItems, cartItemToClear));\n  };\n  const value = {\n    isCartOpen,\n    setIsCartOpen,\n    addItemToCart,\n    removeItemToCart,\n    clearItemFromCart,\n    cartItems,\n    cartCount,\n    cartTotal\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 10\n  }, this);\n};\n_s(CartProvider, \"Q34pEVQNnwOC1WPCa5SwU/+yuyE=\");\n_c2 = CartProvider;\nvar _c, _c2;\n$RefreshReg$(_c, \"AddToCartAction\");\n$RefreshReg$(_c2, \"CartProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","useReducer","jsxDEV","_jsxDEV","addCartItem","cartItems","productToAdd","existingCartItem","find","cartItem","id","map","quantity","removeCartItem","cartItemToRemove","filter","clearCartItem","cartItemToClear","CartContext","isCartOpen","setIsCartOpen","addItemToCart","removeItemFromCart","clearItemFromCart","cartCount","cartTotal","INITIAL_STATE","cartReducer","state","action","type","payload","Error","AddToCartAction","itemToAdd","dispatch","_c","CartProvider","_ref","_s","children","setCartItems","setCartCount","setCartTotal","newCartCount","reduce","total","newCartTotal","price","removeItemToCart","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/Aleksandar/Desktop/Udemy/React/crwn-clothing/src/contexts/cart.context.jsx"],"sourcesContent":["import { createContext, useEffect, useState, useReducer } from \"react\";\r\n\r\nconst addCartItem = (cartItems, productToAdd) => {\r\n  //find if cartitems contains productToAdd\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === productToAdd.id\r\n  );\r\n\r\n  //If found, increment quantity\r\n  if (existingCartItem) {\r\n    return cartItems.map((cartItem) =>\r\n      cartItem.id === productToAdd.id\r\n        ? { ...cartItem, quantity: cartItem.quantity + 1 }\r\n        : cartItem\r\n    );\r\n  }\r\n\r\n  //return new arra with modified cartItems/ new cart item\r\n  return [...cartItems, { ...productToAdd, quantity: 1 }];\r\n};\r\n\r\nconst removeCartItem = (cartItems, cartItemToRemove) => {\r\n  //find the cart item to remove\r\n  const existingCartItem = cartItems.find(\r\n    (cartItem) => cartItem.id === cartItemToRemove.id\r\n  );\r\n\r\n  //check if quantity is equal to 1, if it is remove the item from cart\r\n  if (existingCartItem.quantity === 1) {\r\n    return cartItems.filter((cartItem) => cartItem.id !== cartItemToRemove.id);\r\n  }\r\n\r\n  //return back cart items with matching cart item with reduced quantity\r\n  return cartItems.map((cartItem) =>\r\n    cartItem.id === cartItemToRemove.id\r\n      ? { ...cartItem, quantity: cartItem.quantity - 1 }\r\n      : cartItem\r\n  );\r\n};\r\n\r\nconst clearCartItem = (cartItems, cartItemToClear) => {\r\n  return cartItems.filter((cartItem) => cartItem.id !== cartItemToClear.id);\r\n};\r\n\r\nexport const CartContext = createContext({\r\n  isCartOpen: false,\r\n  setIsCartOpen: () => {},\r\n  cartItems: [],\r\n  addItemToCart: () => {},\r\n  removeItemFromCart: () => {},\r\n  clearItemFromCart: () => {},\r\n  cartCount: 0,\r\n  cartTotal: 0,\r\n});\r\n\r\nconst INITIAL_STATE = {\r\n  isCartOpen: false,\r\n  cartItems: [],\r\n  cartCount: 0,\r\n  cartTotal: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  const { type, payload } = action;\r\n\r\n  switch (type) {\r\n    case \"ADD_TO_CART\":\r\n      return {\r\n        ...state,\r\n        cartItems: addItemToCart(state.cartItems, payload),\r\n        cartTotal: cartCount,\r\n      };\r\n    default:\r\n      throw new Error(`unhandled type of ${type} of cartReducer`);\r\n  }\r\n};\r\n\r\nconst AddToCartAction = (itemToAdd) => {\r\n  dispatch({ type: \"ADD_TO_CART\", payload: itemToAdd });\r\n};\r\n\r\nexport const CartProvider = ({ children }) => {\r\n  const [isCartOpen, setIsCartOpen] = useState(false);\r\n  const [cartItems, setCartItems] = useState([]);\r\n  const [cartCount, setCartCount] = useState(0);\r\n  const [cartTotal, setCartTotal] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const newCartCount = cartItems.reduce(\r\n      (total, cartItem) => total + cartItem.quantity,\r\n      0\r\n    );\r\n    setCartCount(newCartCount);\r\n  }, [cartItems]);\r\n\r\n  useEffect(() => {\r\n    const newCartTotal = cartItems.reduce(\r\n      (total, cartItem) => total + cartItem.quantity * cartItem.price,\r\n      0\r\n    );\r\n    setCartTotal(newCartTotal);\r\n  }, [cartItems]);\r\n\r\n  const addItemToCart = (productToAdd) => {\r\n    setCartItems(addCartItem(cartItems, productToAdd));\r\n  };\r\n\r\n  const removeItemToCart = (cartItemToRemove) => {\r\n    setCartItems(removeCartItem(cartItems, cartItemToRemove));\r\n  };\r\n\r\n  const clearItemFromCart = (cartItemToClear) => {\r\n    setCartItems(clearCartItem(cartItems, cartItemToClear));\r\n  };\r\n\r\n  const value = {\r\n    isCartOpen,\r\n    setIsCartOpen,\r\n    addItemToCart,\r\n    removeItemToCart,\r\n    clearItemFromCart,\r\n    cartItems,\r\n    cartCount,\r\n    cartTotal,\r\n  };\r\n\r\n  return <CartContext.Provider value={value}>{children}</CartContext.Provider>;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}